#!/usr/bin/env python
import roslib; roslib.load_manifest('ardrone_tutorials')
import rospy

# Import the two types of messages we're interested in
from sensor_msgs.msg import Image    	 # for receiving the video feed
from ardrone_autonomy.msg import Navdata # for receiving navdata feedback

# We need to use resource locking to handle synchronization between GUI thread and ROS topic callbacks
from threading import Lock



from PySide import QtCore, QtGui
from drone_controller import BasicDroneController
GUI_UPDATE_PERIOD = 20

class DroneUi(QtGui.QMainWindow):
    def __init__(self):
	# Construct the parent class
	#DroneVideoDisplay.__init__(self)
	super(DroneUi, self).__init__()
        self.setWindowTitle('AR.Drone Image')
	self.imageBox = QtGui.QLabel(self)
	self.setCentralWidget(self.imageBox)
        self.changeCameraButton = QtGui.QPushButton("&Change_camera")  
        self.changeCameraButton.clicked.connect(self.changeCamera) 
	
	self.statusMessage = ' Press C to change camara'
	
        self.bottomCamara = rospy.Subscriber('/ardrone/bottom/image_raw',Image,self.ReceiveBottomImage)
        self.frontCamara =  rospy.Subscriber('/ardrone/image_raw',Image,self.ReceiveFrontImage)

        self.image_bottom = None
	self.imageBottomLock = Lock()
        self.image_front = None
	self.imageFrontLock = Lock()

        self.image = None
        self.imageLock = Lock()
        self.camera = 0

        self.redrawTimer = QtCore.QTimer(self)
	self.redrawTimer.timeout.connect(self.RedrawCallback)
	self.redrawTimer.start(GUI_UPDATE_PERIOD)
    def keyPressEvent(self, event):
	key = event.key()
	if not event.isAutoRepeat():	
		if key == QtCore.Qt.Key.Key_C:
			self.changeCamera()
				
				
    def RedrawCallback(self):
        if self.camera ==0:
            self.image =self.image_front
        else :
            self.image =self.image_bottom

	if self.image is not None:
			# We have some issues with locking between the display thread and the ros messaging thread due to the size of the image, so we need to lock the resources
			self.imageLock.acquire()
			try:			
					# Convert the ROS image into a QImage which we can display
					image = QtGui.QPixmap.fromImage(QtGui.QImage(self.image.data, self.image.width, self.image.height, QtGui.QImage.Format_RGB888))
					painter = QtGui.QPainter()
					painter.begin(image)
					painter.setPen(QtGui.QColor(0,255,0))
					painter.setBrush(QtGui.QColor(0,255,0))
					painter.end()
			finally:
				self.imageLock.release()
			self.resize(image.width(),image.height())
			self.imageBox.setPixmap(image)
	self.statusBar().showMessage(self.statusMessage)

    def ReceiveBottomImage(self,data):
        self.imageBottomLock.acquire()
	try:
		self.image_bottom = data 
	finally:
		self.imageBottomLock.release()

    def ReceiveFrontImage(self,data):
        self.imageFrontLock.acquire()
	try:
		self.image_front = data 
	finally:
		self.imageFrontLock.release()

    def changeCamera(self):
        if self.camera == 0:
            self.camera = 1
        else:
            self.camera = 0
if __name__=='__main__':
	import sys
	rospy.init_node('ardrone_ui')
	app = QtGui.QApplication(sys.argv)
	controller = BasicDroneController()
	controller.SendTakeoff()
	display = DroneUi()
	display.show()
	status = app.exec_()
	rospy.signal_shutdown('Great Flying!')
	sys.exit(status)



    



